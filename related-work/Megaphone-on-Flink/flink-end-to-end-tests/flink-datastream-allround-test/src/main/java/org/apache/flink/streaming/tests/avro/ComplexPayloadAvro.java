/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.streaming.tests.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ComplexPayloadAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2750936869018926220L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ComplexPayloadAvro\",\"namespace\":\"org.apache.flink.streaming.tests.avro\",\"fields\":[{\"name\":\"eventTime\",\"type\":\"long\",\"default\":-1},{\"name\":\"stringList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"strPayload\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"innerPayLoad\",\"type\":{\"type\":\"record\",\"name\":\"InnerPayLoadAvro\",\"fields\":[{\"name\":\"sequenceNumber\",\"type\":\"long\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ComplexPayloadAvro> ENCODER =
      new BinaryMessageEncoder<ComplexPayloadAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ComplexPayloadAvro> DECODER =
      new BinaryMessageDecoder<ComplexPayloadAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ComplexPayloadAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ComplexPayloadAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ComplexPayloadAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ComplexPayloadAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ComplexPayloadAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ComplexPayloadAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ComplexPayloadAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ComplexPayloadAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long eventTime;
   private java.util.List<java.lang.String> stringList;
   private java.lang.String strPayload;
   private org.apache.flink.streaming.tests.avro.InnerPayLoadAvro innerPayLoad;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ComplexPayloadAvro() {}

  /**
   * All-args constructor.
   * @param eventTime The new value for eventTime
   * @param stringList The new value for stringList
   * @param strPayload The new value for strPayload
   * @param innerPayLoad The new value for innerPayLoad
   */
  public ComplexPayloadAvro(java.lang.Long eventTime, java.util.List<java.lang.String> stringList, java.lang.String strPayload, org.apache.flink.streaming.tests.avro.InnerPayLoadAvro innerPayLoad) {
    this.eventTime = eventTime;
    this.stringList = stringList;
    this.strPayload = strPayload;
    this.innerPayLoad = innerPayLoad;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventTime;
    case 1: return stringList;
    case 2: return strPayload;
    case 3: return innerPayLoad;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventTime = (java.lang.Long)value$; break;
    case 1: stringList = (java.util.List<java.lang.String>)value$; break;
    case 2: strPayload = value$ != null ? value$.toString() : null; break;
    case 3: innerPayLoad = (org.apache.flink.streaming.tests.avro.InnerPayLoadAvro)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventTime' field.
   * @return The value of the 'eventTime' field.
   */
  public long getEventTime() {
    return eventTime;
  }


  /**
   * Sets the value of the 'eventTime' field.
   * @param value the value to set.
   */
  public void setEventTime(long value) {
    this.eventTime = value;
  }

  /**
   * Gets the value of the 'stringList' field.
   * @return The value of the 'stringList' field.
   */
  public java.util.List<java.lang.String> getStringList() {
    return stringList;
  }


  /**
   * Sets the value of the 'stringList' field.
   * @param value the value to set.
   */
  public void setStringList(java.util.List<java.lang.String> value) {
    this.stringList = value;
  }

  /**
   * Gets the value of the 'strPayload' field.
   * @return The value of the 'strPayload' field.
   */
  public java.lang.String getStrPayload() {
    return strPayload;
  }


  /**
   * Sets the value of the 'strPayload' field.
   * @param value the value to set.
   */
  public void setStrPayload(java.lang.String value) {
    this.strPayload = value;
  }

  /**
   * Gets the value of the 'innerPayLoad' field.
   * @return The value of the 'innerPayLoad' field.
   */
  public org.apache.flink.streaming.tests.avro.InnerPayLoadAvro getInnerPayLoad() {
    return innerPayLoad;
  }


  /**
   * Sets the value of the 'innerPayLoad' field.
   * @param value the value to set.
   */
  public void setInnerPayLoad(org.apache.flink.streaming.tests.avro.InnerPayLoadAvro value) {
    this.innerPayLoad = value;
  }

  /**
   * Creates a new ComplexPayloadAvro RecordBuilder.
   * @return A new ComplexPayloadAvro RecordBuilder
   */
  public static org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder newBuilder() {
    return new org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder();
  }

  /**
   * Creates a new ComplexPayloadAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ComplexPayloadAvro RecordBuilder
   */
  public static org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder newBuilder(org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder other) {
    if (other == null) {
      return new org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder();
    } else {
      return new org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder(other);
    }
  }

  /**
   * Creates a new ComplexPayloadAvro RecordBuilder by copying an existing ComplexPayloadAvro instance.
   * @param other The existing instance to copy.
   * @return A new ComplexPayloadAvro RecordBuilder
   */
  public static org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder newBuilder(org.apache.flink.streaming.tests.avro.ComplexPayloadAvro other) {
    if (other == null) {
      return new org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder();
    } else {
      return new org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for ComplexPayloadAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ComplexPayloadAvro>
    implements org.apache.avro.data.RecordBuilder<ComplexPayloadAvro> {

    private long eventTime;
    private java.util.List<java.lang.String> stringList;
    private java.lang.String strPayload;
    private org.apache.flink.streaming.tests.avro.InnerPayLoadAvro innerPayLoad;
    private org.apache.flink.streaming.tests.avro.InnerPayLoadAvro.Builder innerPayLoadBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[0].schema(), other.eventTime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.stringList)) {
        this.stringList = data().deepCopy(fields()[1].schema(), other.stringList);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.strPayload)) {
        this.strPayload = data().deepCopy(fields()[2].schema(), other.strPayload);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.innerPayLoad)) {
        this.innerPayLoad = data().deepCopy(fields()[3].schema(), other.innerPayLoad);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasInnerPayLoadBuilder()) {
        this.innerPayLoadBuilder = org.apache.flink.streaming.tests.avro.InnerPayLoadAvro.newBuilder(other.getInnerPayLoadBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ComplexPayloadAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.flink.streaming.tests.avro.ComplexPayloadAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[0].schema(), other.eventTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stringList)) {
        this.stringList = data().deepCopy(fields()[1].schema(), other.stringList);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.strPayload)) {
        this.strPayload = data().deepCopy(fields()[2].schema(), other.strPayload);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.innerPayLoad)) {
        this.innerPayLoad = data().deepCopy(fields()[3].schema(), other.innerPayLoad);
        fieldSetFlags()[3] = true;
      }
      this.innerPayLoadBuilder = null;
    }

    /**
      * Gets the value of the 'eventTime' field.
      * @return The value.
      */
    public long getEventTime() {
      return eventTime;
    }


    /**
      * Sets the value of the 'eventTime' field.
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder setEventTime(long value) {
      validate(fields()[0], value);
      this.eventTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * @return This builder.
      */
    public org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder clearEventTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'stringList' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getStringList() {
      return stringList;
    }


    /**
      * Sets the value of the 'stringList' field.
      * @param value The value of 'stringList'.
      * @return This builder.
      */
    public org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder setStringList(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.stringList = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'stringList' field has been set.
      * @return True if the 'stringList' field has been set, false otherwise.
      */
    public boolean hasStringList() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'stringList' field.
      * @return This builder.
      */
    public org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder clearStringList() {
      stringList = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'strPayload' field.
      * @return The value.
      */
    public java.lang.String getStrPayload() {
      return strPayload;
    }


    /**
      * Sets the value of the 'strPayload' field.
      * @param value The value of 'strPayload'.
      * @return This builder.
      */
    public org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder setStrPayload(java.lang.String value) {
      validate(fields()[2], value);
      this.strPayload = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'strPayload' field has been set.
      * @return True if the 'strPayload' field has been set, false otherwise.
      */
    public boolean hasStrPayload() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'strPayload' field.
      * @return This builder.
      */
    public org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder clearStrPayload() {
      strPayload = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'innerPayLoad' field.
      * @return The value.
      */
    public org.apache.flink.streaming.tests.avro.InnerPayLoadAvro getInnerPayLoad() {
      return innerPayLoad;
    }


    /**
      * Sets the value of the 'innerPayLoad' field.
      * @param value The value of 'innerPayLoad'.
      * @return This builder.
      */
    public org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder setInnerPayLoad(org.apache.flink.streaming.tests.avro.InnerPayLoadAvro value) {
      validate(fields()[3], value);
      this.innerPayLoadBuilder = null;
      this.innerPayLoad = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'innerPayLoad' field has been set.
      * @return True if the 'innerPayLoad' field has been set, false otherwise.
      */
    public boolean hasInnerPayLoad() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'innerPayLoad' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.flink.streaming.tests.avro.InnerPayLoadAvro.Builder getInnerPayLoadBuilder() {
      if (innerPayLoadBuilder == null) {
        if (hasInnerPayLoad()) {
          setInnerPayLoadBuilder(org.apache.flink.streaming.tests.avro.InnerPayLoadAvro.newBuilder(innerPayLoad));
        } else {
          setInnerPayLoadBuilder(org.apache.flink.streaming.tests.avro.InnerPayLoadAvro.newBuilder());
        }
      }
      return innerPayLoadBuilder;
    }

    /**
     * Sets the Builder instance for the 'innerPayLoad' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder setInnerPayLoadBuilder(org.apache.flink.streaming.tests.avro.InnerPayLoadAvro.Builder value) {
      clearInnerPayLoad();
      innerPayLoadBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'innerPayLoad' field has an active Builder instance
     * @return True if the 'innerPayLoad' field has an active Builder instance
     */
    public boolean hasInnerPayLoadBuilder() {
      return innerPayLoadBuilder != null;
    }

    /**
      * Clears the value of the 'innerPayLoad' field.
      * @return This builder.
      */
    public org.apache.flink.streaming.tests.avro.ComplexPayloadAvro.Builder clearInnerPayLoad() {
      innerPayLoad = null;
      innerPayLoadBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ComplexPayloadAvro build() {
      try {
        ComplexPayloadAvro record = new ComplexPayloadAvro();
        record.eventTime = fieldSetFlags()[0] ? this.eventTime : (java.lang.Long) defaultValue(fields()[0]);
        record.stringList = fieldSetFlags()[1] ? this.stringList : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        record.strPayload = fieldSetFlags()[2] ? this.strPayload : (java.lang.String) defaultValue(fields()[2]);
        if (innerPayLoadBuilder != null) {
          try {
            record.innerPayLoad = this.innerPayLoadBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("innerPayLoad"));
            throw e;
          }
        } else {
          record.innerPayLoad = fieldSetFlags()[3] ? this.innerPayLoad : (org.apache.flink.streaming.tests.avro.InnerPayLoadAvro) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ComplexPayloadAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ComplexPayloadAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ComplexPayloadAvro>
    READER$ = (org.apache.avro.io.DatumReader<ComplexPayloadAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.eventTime);

    long size0 = this.stringList.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.stringList) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.strPayload);

    this.innerPayLoad.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventTime = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.stringList;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("stringList").schema());
        this.stringList = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      this.strPayload = in.readString();

      if (this.innerPayLoad == null) {
        this.innerPayLoad = new org.apache.flink.streaming.tests.avro.InnerPayLoadAvro();
      }
      this.innerPayLoad.customDecode(in);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventTime = in.readLong();
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.stringList;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("stringList").schema());
            this.stringList = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 2:
          this.strPayload = in.readString();
          break;

        case 3:
          if (this.innerPayLoad == null) {
            this.innerPayLoad = new org.apache.flink.streaming.tests.avro.InnerPayLoadAvro();
          }
          this.innerPayLoad.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










